// Importaciones ES Modules para React y React DOM
import path from 'path';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
  // Configuración para generar una compilación standalone que funciona en Docker
  output: 'standalone',
  // Usar rewrites() para redirigir peticiones API al backend
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        // Usar variable de entorno o fallback a localhost para desarrollo local
        destination: `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080'}/api/:path*`,
      },
    ]
  },
  // Configuración optimizada para Docker
  webpack: (config, { dev, isServer }) => {
    // Forzar resoluciones para evitar conflictos de versiones - usando path para evitar require
    config.resolve.alias = {
      ...config.resolve.alias,
      'react': path.resolve('./node_modules/react'),
      'react-dom': path.resolve('./node_modules/react-dom')
    };

    // Optimización para contenedores Docker
    if (!dev && !isServer) {
      // Reducir tamaño del bundle para producción
      config.optimization.minimize = true;
    }

    // Solución para entornos de Docker
    if (!isServer) {
      // Evitar errores de importación de módulos del lado del servidor
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        path: false,
        os: false,
      };
    }

    return config;
  },
  // Desactivar completamente React Strict Mode
  reactStrictMode: false,
  // Habilitar minificación solo en producción
  swcMinify: process.env.NODE_ENV === 'production',
  // Configuración para depuración
  productionBrowserSourceMaps: true,
  // Optimización para Docker
  experimental: {
    // Características experimentales desactivadas para mayor estabilidad
    scrollRestoration: false,
  },
  // Configuración para entorno Docker
  poweredByHeader: false,
  generateEtags: false,
  // Configuración de caché optimizada
  onDemandEntries: {
    // Reducir el tiempo de espera para el desarrollo en Docker
    maxInactiveAge: 60 * 1000,
    pagesBufferLength: 1,
  },
}

export default nextConfig
