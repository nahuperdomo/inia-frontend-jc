# DOCUMENTACIÓN DEL PROYECTO INIA
=============================================

## INTRODUCCIÓN GENERAL
=============================================

El proyecto INIA es una aplicación web diseñada para la gestión y análisis de calidad de semillas. 
El sistema permite registrar lotes de semillas, realizar diferentes tipos de análisis (pureza, germinación, 
determinación de otras semillas nocivas, etc.), y generar reportes basados en estos análisis. 
Está orientado a técnicos y analistas del sector agrícola que necesitan un sistema centralizado 
para el manejo de información relacionada con la calidad de semillas.

## ESTRUCTURA TECNOLÓGICA
=============================================

### Stack Tecnológico

- **Frontend**: Next.js 14 (React), TypeScript
- **UI**: Componentes personalizados con shadcn/ui y Tailwind CSS
- **Backend**: Java con Spring Boot (microservicios RESTful)
- **Autenticación**: JWT (JSON Web Tokens)

### Estructura de Archivos

El proyecto sigue una estructura organizada basada en el sistema de carpetas de Next.js App Router:

- **/app**: Contiene la estructura de rutas de la aplicación y páginas principales
  - **/dashboard**: Panel principal con resumen de información
  - **/login**: Autenticación de usuarios
  - **/lotes**: Gestión de lotes de semillas
  - **/listado**: Visualización de listados de diferentes entidades
  - **/registro**: Formularios para registro de nuevos datos
  - **/pureza**, **/germinacion**, etc.: Módulos específicos para cada tipo de análisis
  - **/services**: Servicios para comunicación con la API del backend
  - **/models**: Definición de tipos e interfaces de datos
  
- **/components**: Componentes reutilizables
  - **/ui**: Componentes básicos de interfaz
  - **/forms**: Componentes para formularios reutilizables
  - **/lotes**, **/germinacion**: Componentes específicos por módulo

- **/lib**: Utilidades, hooks personalizados, y funciones auxiliares
  - **/api-client**: Cliente para comunicación con la API
  - **/error-handling**: Gestión centralizada de errores
  - **/hooks**: Hooks personalizados de React
  - **/validations**: Esquemas de validación con Zod

- **/docs**: Documentación técnica y de procesos

## CONCEPTOS CLAVE DEL SISTEMA
=============================================

### Lotes

Los lotes representan las muestras de semillas que ingresan al sistema. Cada lote tiene información básica como:
- Identificador único
- Cultivo y variedad
- Empresa propietaria
- Fecha de ingreso
- Estado actual

Los lotes son la entidad central sobre la que se realizan los distintos tipos de análisis.

### Tipos de Análisis

El sistema soporta varios tipos de análisis para las semillas:

1. **Pureza (Pureza)**: 
   - Análisis físico de la composición de la muestra
   - Mide porcentajes de semilla pura, materia inerte, otros cultivos y malezas
   - Incluye sección para otras semillas encontradas

2. **Germinación (Germinacion)**:
   - Evalúa la capacidad de las semillas para germinar
   - Maneja múltiples repeticiones y conteos
   - Registra fechas de inicio, conteos intermedios y finalización

3. **Determinación de Otras Semillas Nocivas (DOSN)**:
   - Detecta presencia de semillas de malezas nocivas
   - Puede ser análisis completo, reducido o limitado
   - Registra información específica sobre Cuscuta

4. **Peso de Mil Semillas (PMS)**:
   - Calcula el peso de mil semillas como indicador de calidad

5. **Tetrazolio**:
   - Prueba de viabilidad rápida usando tinción

### Estados de Flujo de Trabajo

Los análisis en el sistema siguen un ciclo de vida definido por estados:

- `PENDIENTE`: Registrado pero no iniciado
- `EN_PROCESO`: Análisis en curso
- `FINALIZADO`: Análisis completado técnicamente
- `PENDIENTE_APROBACION`: Esperando validación superior
- `APROBADO`: Validado y listo para reportes
- `PARA_REPETIR`: Marcado para repetir por inconsistencias

## ARQUITECTURA DE LA APLICACIÓN
=============================================

### Modelo de Datos

El sistema está organizado en torno a interfaces TypeScript que definen la estructura de los datos:

- Interfaces base (`AnalisisDTO`, `AnalisisRequestDTO`) que definen campos comunes
- Interfaces específicas para cada tipo de análisis (`PurezaDTO`, `GerminacionDTO`, etc.)
- Tipos y enumeraciones que definen valores constantes (`EstadoAnalisis`, `TipoAnalisis`, etc.)

### Servicios API

La comunicación con el backend se realiza a través de servicios organizados por dominio:

- **api.ts**: Cliente base para peticiones HTTP con manejo de tokens JWT
- Servicios específicos por entidad: `lote-service.ts`, `pureza-service.ts`, etc.

Ejemplo de patrón en los servicios:
- Métodos CRUD básicos (crear, obtener, actualizar, eliminar)
- Métodos específicos para estados de flujo (finalizar, aprobar, repetir)
- Métodos de consulta especializada (por lote, activos, etc.)

### Estructura de Componentes

Los componentes siguen una estructura jerárquica:

1. **Layout y páginas**: Definen la estructura general y rutas
2. **Secciones**: Organizan partes específicas de una página
3. **Componentes de dominio**: Manejan entidades específicas (ej: `lot-card.tsx`)
4. **Componentes base**: UI reutilizable (`Button`, `Card`, etc.)

## FLUJOS DE TRABAJO PRINCIPALES
=============================================

### Autenticación

1. Usuario ingresa credenciales en `/login`
2. El servicio `auth-service.ts` verifica con el backend
3. Se almacena el token JWT para peticiones subsecuentes
4. `middleware.ts` protege rutas que requieren autenticación
5. `auth-provider.tsx` mantiene el estado de autenticación

### Gestión de Lotes

1. Registro de nuevo lote desde `/registro/lotes`
2. Visualización en listado general `/lotes` 
3. Detalle específico en `/lotes/[id]`
4. Asociación con análisis desde componentes específicos

### Flujo de Análisis

1. Creación de análisis desde página de lote o sección específica
2. Asignación a lote existente
3. Registro de datos según tipo de análisis
4. Cambios de estado según avanza el proceso
5. Visualización de resultados en reportes

## SERVICIOS PRINCIPALES
=============================================

### API Base (api.ts)

Provee funcionalidad para todas las comunicaciones HTTP:
- Manejo automático de tokens de autenticación
- Gestión de errores HTTP
- Procesamiento de respuestas

### Servicios por Entidad

Cada entidad tiene su propio servicio que expone métodos específicos:

#### lote-service.ts
- Manejo de lotes (semillas ingresadas al sistema)
- CRUD básico y consultas específicas

#### pureza-service.ts, germinacion-service.ts, dosn-service.ts
- Manejo específico para cada tipo de análisis
- Creación, consulta y actualización de análisis
- Métodos para cambios de estado (finalizar, aprobar)

#### catalogo-service.ts, especie-service.ts
- Datos maestros y catálogos de referencia

## COMPONENTES DESTACADOS
=============================================

### Formularios

El sistema utiliza un patrón de formularios reutilizables:

- `Form.tsx`: Componente base para formularios
- `FormField.tsx`: Campo de formulario con validación
- `FormSelect.tsx`: Selector con opciones dinámicas

Los formularios implementan validación mediante Zod para garantizar integridad de datos.

### Tablas y Listados

- Componentes de tabla con capacidad de filtrado y ordenación
- Paginación para grandes conjuntos de datos
- Acciones contextuales según el estado de cada elemento

### Modales y Diálogos

- Sistema de diálogos para detalles y confirmaciones
- Modales para edición rápida sin cambiar de página

## MANEJO DE ERRORES
=============================================

El sistema implementa un manejo centralizado de errores:

- Captura de errores HTTP en servicios API
- Presentación amigable de errores al usuario
- Logging para depuración
- Manejo de casos comunes (sesión expirada, servidor no disponible)

## GUÍA DE DESARROLLO
=============================================

### Configuración del Entorno

1. Instalar dependencias: `npm install` o `pnpm install`
2. Iniciar servidor de desarrollo: `npm run dev`
3. Construir para producción: `npm run build`

### Convenciones de Código

- Nombres de componentes en PascalCase
- Nombres de funciones y variables en camelCase
- Archivos de servicios con sufijo `-service.ts`
- Interfaces con sufijo `DTO` para objetos de transferencia
- Tipado explícito para parámetros y retornos de función

### Extensión del Sistema

Para añadir un nuevo tipo de análisis:

1. Crear interfaces en `/models/interfaces/[nuevo-analisis].ts`
2. Añadir el tipo a enumeración en `enums.ts`
3. Crear servicio en `/services/[nuevo-analisis]-service.ts`
4. Implementar componentes UI necesarios
5. Añadir páginas en estructura de carpetas

## CONCLUSIÓN
=============================================

El sistema INIA proporciona una plataforma completa para el análisis de calidad de semillas
con una arquitectura moderna basada en Next.js y TypeScript en el frontend. Su diseño modular
facilita la extensión y mantenimiento, mientras que la fuerte tipificación garantiza
robustez en el manejo de datos.

La organización por dominios (lotes, análisis de diferentes tipos) refleja el negocio real,
y los flujos de trabajo implementados siguen los procesos establecidos en el sector agrícola.

Este documento proporciona una visión general del proyecto, pero se recomienda explorar
el código fuente y la documentación adicional en la carpeta `/docs` para detalles específicos
de implementación.